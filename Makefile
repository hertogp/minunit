TEST=x
CFLAGS=-Wall -pedantic -std=c99
LDFLAGS= -static ${LIBS}

# test runners
test_cfiles=$(sort $(wildcard test_*.c))
test_ofiles=$(test_cfiles:.c=.o)
test_hfiles=$(test_cfiles:.c=_mu.h)
test_runners=$(test_cfiles:.c=)

# builds x, the test runner & runs the test(s)
all: x test

.PHONY: all clean

install:
	@echo "no installation required nor needed"

# remove test runner, autogenerated header file & obj-files
clean:
	-rm -f *_mu.h *.o $(test_runners) ${TEST}

# Example -> x.c
${TEST}.o: ${TEST}.h

${TEST}: ${TEST}.o
	$(CC) ${CFLAGS} $< -o $@

.c.o:
	$(CC) ${CFLAGS} -c $< -o $@

# run *all* test runners
# - remove the ';' to stop make'ing after a test runner fails
test: $(test_runners)
	@$(foreach test, $(test_runners), ./$(test);)

# `make just_test_<name>', runs a single test_<name>
$(test_runners:%=just_%): just_%: %
	-./$<

# generate test_x_mu.h file, to be #include'd in 'test_x.c'
# test_x_mu.h: test_x.c
$(test_hfiles): %_mu.h: %.c
	./mu_header $*

# strip main from x, the test runner provides 'main'
# test_x: minunit.h test_x_mu.h test_x.o x.o
$(test_runners): %: minunit.h %_mu.h %.o ${TEST}.o
	strip -N main ${TEST}.o -o ${TEST}_stripped.o
	${CC} ${CFLAGS} $@.o ${TEST}_stripped.o -o $@

